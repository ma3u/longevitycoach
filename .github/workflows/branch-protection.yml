name: Branch Protection

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Permissions for the GitHub token
permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

jobs:
  enforce-branch-protection:
    name: Enforce Branch Protection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Verify branch protection
        id: branch-protection
        uses: actions/github-script@v6
        with:
          script: |
            const { data: protection } = await github.rest.repos.getBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: context.ref.replace('refs/heads/', '')
            });

            const requiredChecks = [
              'enforce-branch-protection',
              'lint',
              'test',
              'build'
            ];

            const missingChecks = requiredChecks.filter(
              check => !protection.required_status_checks.checks.some(c => c.context === check)
            );

            if (missingChecks.length > 0) {
              core.setFailed(`Missing required status checks: ${missingChecks.join(', ')}`);
            }

            return missingChecks.length === 0;

      - name: Check for WIP in PR title
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request?.title || '';
            if (title.match(/\bWIP\b|\bwip\b|\bDNM\b|\bdnm\b|\bdo not merge\b/i)) {
              core.setFailed('PR title contains WIP/DNM marker. Please remove it before merging.');
            }

      - name: Check for large files
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .github/workflows/gitleaks.toml

      - name: Verify commit messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

      - name: Validate PR title
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Configure semantic PR validation
          VALIDATE_SINGLE_COMMIT: 'true'
          TYPES: 'feat,fix,docs,style,refactor,test,chore'
          REQUIRE_SCOPE: 'true'
          MAX_TITLE_LENGTH: '72'

      - name: Comment on PR with next steps
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const isDraft = pr.draft;
            const requestedReviewers = pr.requested_reviewers?.length > 0 || pr.requested_teams?.length > 0;
            
            if (isDraft) {
              console.log('PR is a draft, no action needed');
              return;
            }


            if (!requestedReviewers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '👋 Please assign reviewers to this PR.'
              });
            }

      - name: Update PR with deployment preview
        if: github.event_name == 'pull_request' && github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const previewUrl = `https://${context.repo.owner}-${context.repo.repo}-pr-${context.issue.number}.vercel.app`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🚀 Preview available at: ${previewUrl}`
            });

      - name: Check for documentation updates
        if: contains(github.event.pull_request.labels.*.name, 'documentation')
        run: |
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep -q "\.md$"; then
            echo "No documentation (.md) files were updated. Please ensure documentation is kept up to date."
            exit 1
          fi

      - name: Check for test updates
        if: contains(github.event.pull_request.labels.*.name, 'test')
        run: |
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep -q "\.test\.[jt]sx?$"; then
            echo "No test files were updated. Please ensure tests are added or updated with new features."
            exit 1
          fi

      - name: Post PR status
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });

            const failedChecks = checkRuns.check_runs.filter(
              check => check.conclusion === 'failure' || check.conclusion === 'action_required'
            );

            if (failedChecks.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ Some checks failed. Please review the following failed checks:\n${failedChecks.map(c => `- ${c.name}`).join('\n')}`
              });
            }
